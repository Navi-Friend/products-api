{
	"info": {
		"_postman_id": "5929a833-0e97-4443-b1e5-a72517f623cd",
		"name": "Product API Copy",
		"description": "REST API for managing products with CRUD operations and statistics.\nBase URL: {{baseUrl}}\n\n**Product Schema**:\n- `_id`: MongoDB ObjectId\n- `name`: Unique product name (string)\n- `price`: Price (positive number)\n- `quantity`: Stock (non-negative number)\n- `category`: One of `electronics`, `clothing`, `food`\n- `description`: Optional description (string)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "38510845"
	},
	"item": [
		{
			"name": "Create Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has _id\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"_id\");",
							"});",
							"pm.test(\"Response has correct fields\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property(\"name\");",
							"    pm.expect(response).to.have.property(\"price\");",
							"    pm.expect(response).to.have.property(\"quantity\");",
							"    pm.expect(response).to.have.property(\"category\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Product1\",\n  \"price\": 100.12,\n  \"quantity\": 120,\n  \"category\": \"electronics\",\n  \"description\": \"My awesome product\"\n}"
				},
				"url": "{{baseUrl}}/products",
				"description": "Creates a new product.\n\n**Required fields**:\n- `name`: Unique product name (string)\n- `price`: Price (positive number)\n- `quantity`: Stock (non-negative number)\n- `category`: One of `electronics`, `clothing`, `food`\n\n**Optional fields**:\n- `description`: Product description (string)\n\n**Example response (201)**:\n```json\n{\n  \"_id\": \"68112a6bb48f761359efbaaa\",\n  \"name\": \"Product1\",\n  \"price\": 100.12,\n  \"quantity\": 120,\n  \"category\": \"electronics\",\n  \"description\": \"My awesome product\",\n  \"__v\": 0\n}\n```\n\n**Error responses**:\n- **400 (Validation Error)**:\n```json\n{\n  \"error\": {\n    \"status\": \"VALIDATION_ERROR\",\n    \"code\": 400,\n    \"message\": \"Validation failed\",\n    \"details\": [\n      { \"field\": \"name\", \"message\": \"Product name must be a string\" }\n    ]\n  }\n}\n```\n- **400 (Duplicate Key)**:\n```json\n{\n  \"error\": {\n    \"status\": \"DUBLICATE_KEY\",\n    \"code\": 400,\n    \"message\": \"Duplicate value 'Product1' for field 'name'\",\n    \"details\": [\n      { \"field\": \"name\", \"message\": \"Value 'Product1' already exists\" }\n    ]\n  }\n}\n```"
			},
			"response": []
		},
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/products",
				"description": "Retrieves all products.\n\n**Example response (200)**:\n```json\n[\n  {\n    \"_id\": \"68112a6bb48f761359efbaaa\",\n    \"name\": \"Product1\",\n    \"price\": 100.12,\n    \"quantity\": 120,\n    \"category\": \"electronics\",\n    \"description\": \"My awesome product\",\n    \"__v\": 0\n  }\n]\n```\n\n**Error response (500)**:\n```json\n{\n  \"error\": {\n    \"status\": \"INTERNAL_SERVER_ERROR\",\n    \"code\": 500,\n    \"message\": \"Internal server error\",\n    \"details\": []\n  }\n}\n```"
			},
			"response": []
		},
		{
			"name": "Get Product by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has _id\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"_id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "68112a6bb48f761359efbaaa",
							"description": "MongoDB ObjectId"
						}
					]
				},
				"description": "Retrieves a product by ID.\n\n**Parameters**:\n\n- `id`: MongoDB ObjectId (path parameter)\n    \n\n**Example response (200)**:\n\n``` json\n{\n  \"_id\": \"68112a6bb48f761359efbaaa\",\n  \"name\": \"Product1\",\n  \"price\": 100.12,\n  \"quantity\": 120,\n  \"category\": \"electronics\",\n  \"description\": \"My awesome product\",\n  \"__v\": 0\n}\n\n ```\n\n**Error responses**:\n\n- **400 (Invalid ID)**:\n    \n    ``` json\n    {\n    \"error\": {\n      \"status\": \"VALIDATION_ERROR\",\n      \"code\": 400,\n      \"message\": \"Invalid ObjectId\",\n      \"details\": [\n        { \"field\": \"id\", \"message\": \"Id cannot be converted to ObjectId\" }\n      ]\n    }\n    }\n    \n     ```\n    "
			},
			"response": []
		},
		{
			"name": "Update Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has _id\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"_id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Updated Product1\",\n  \"price\": 150.50,\n  \"quantity\": 100,\n  \"category\": \"electronics\",\n  \"description\": \"Updated awesome product\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/products/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "68112a6bb48f761359efbaaa",
							"description": "MongoDB ObjectId"
						}
					]
				},
				"description": "Updates a product by ID.\n\n**Parameters**:\n\n- `id`: MongoDB ObjectId (path parameter)\n    \n\n**Optional fields**:\n\n- `name`: Unique product name (string)\n    \n- `price`: Price (positive number)\n    \n- `quantity`: Stock (non-negative number)\n    \n- `category`: One of `electronics`, `clothing`, `food`\n    \n- `description`: Product description (string)\n    \n\n**Example response (200)**:\n\n``` json\n{\n  \"_id\": \"68112a6bb48f761359efbaaa\",\n  \"name\": \"Updated Product1\",\n  \"price\": 150.50,\n  \"quantity\": 100,\n  \"category\": \"electronics\",\n  \"description\": \"Updated awesome product\",\n  \"__v\": 0\n}\n\n ```\n\n**Error responses**:\n\n- **400 (Validation Error)**:\n    \n    ``` json\n    {\n    \"error\": {\n      \"status\": \"VALIDATION_ERROR\",\n      \"code\": 400,\n      \"message\": \"Validation failed\",\n      \"details\": [\n        { \"field\": \"price\", \"message\": \"Price must be positive\" }\n      ]\n    }\n    }\n    \n     ```\n    \n- **400 (Duplicate Key)**:\n    \n    ``` json\n    {\n    \"error\": {\n      \"status\": \"DUBLICATE_KEY\",\n      \"code\": 400,\n      \"message\": \"Duplicate value 'Updated Product1' for field 'name'\",\n      \"details\": [\n        { \"field\": \"name\", \"message\": \"Value 'Updated Product1' already exists\" }\n      ]\n    }\n    }\n    \n     ```\n    \n- **400 (Invalid ID)**:\n    \n    ``` json\n    {\n    \"error\": {\n      \"status\": \"VALIDATION_ERROR\",\n      \"code\": 400,\n      \"message\": \"Invalid ObjectId\",\n      \"details\": [\n        { \"field\": \"id\", \"message\": \"Id cannot be converted to ObjectId\" }\n      ]\n    }\n    }\n    \n     ```"
			},
			"response": []
		},
		{
			"name": "Delete Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has _id\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"_id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "68112a6bb48f761359efbaaa",
							"description": "MongoDB ObjectId"
						}
					]
				},
				"description": "Deletes a product by ID.\n\n**Parameters**:\n\n- `id`: MongoDB ObjectId (path parameter)\n    \n\n**Example response (200)**:\n\n``` json\n{\n  \"_id\": \"68112a6bb48f761359efbaaa\",\n  \"name\": \"Product1\",\n  \"price\": 100.12,\n  \"quantity\": 120,\n  \"category\": \"electronics\",\n  \"description\": \"My awesome product\",\n  \"__v\": 0\n}\n\n ```\n\n**Error responses**:\n\n- **400 (Invalid ID)**:\n    \n    ``` json\n    {\n    \"error\": {\n      \"status\": \"VALIDATION_ERROR\",\n      \"code\": 400,\n      \"message\": \"Invalid ObjectId\",\n      \"details\": [\n        { \"field\": \"id\", \"message\": \"Id cannot be converted to ObjectId\" }\n      ]\n    }\n    }\n    \n     ```"
			},
			"response": []
		},
		{
			"name": "Get Statistics",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has totalProducts\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"totalProducts\");",
							"});",
							"pm.test(\"Response has productsByCategory\", function () {",
							"    pm.expect(pm.response.json()).to.have.property(\"productsByCategory\").that.is.an(\"array\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/statistics",
				"description": "Retrieves product statistics.\n\n**Example response (200)**:\n```json\n{\n  \"totalProducts\": 7,\n  \"averagePrice\": 8585.802357142857,\n  \"productsByCategory\": [\n    { \"count\": 6, \"category\": \"clothing\" },\n    { \"count\": 1, \"category\": \"electronics\" }\n  ]\n}\n```\n\n**Error response (500)**:\n```json\n{\n  \"error\": {\n    \"status\": \"INTERNAL_SERVER_ERROR\",\n    \"code\": 500,\n    \"message\": \"Failed to retrieve statistics\",\n    \"details\": []\n  }\n}\n```"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000/api"
		}
	]
}